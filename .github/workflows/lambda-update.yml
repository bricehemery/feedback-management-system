name: Lambda Update Pipeline

on:
  push:
    branches:
      - main
    paths:
      - "lambda/**/handler.py" # Trigger only if Lambda function code changes
  pull_request:
    branches:
      - main
    paths:
      - "lambda/**/handler.py" # Trigger for PRs that change Lambda code

env:
  AWS_REGION: eu-west-3

permissions:
  id-token: write
  contents: read

jobs:
  zip:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v45

      - name: List all changed files
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          for file in ${ALL_CHANGED_FILES}; do
          echo "$file was changed"
          done

      - name: Detect updated Lambda handlers
        id: detect-updated-handlers
        run: |
          echo "Changed files: ${{ steps.changed-files.outputs.all_changed_files }}"
          
          # Convert the list of changed files into lines and check for 'handler.py'
          UPDATED_HANDLERS=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | tr ' ' '\n' | grep -E '^lambda/.+/handler\.py$' || true)

          echo "Detected updated handlers: $UPDATED_HANDLERS"

          # Check if any handlers were updated
          if [[ -z "$UPDATED_HANDLERS" ]]; then
              echo "No updated handlers detected."
              echo "skip_zip=true" >> $GITHUB_ENV
          else
              echo "Updated handlers: $UPDATED_HANDLERS"
              echo "skip_zip=false" >> $GITHUB_ENV
              echo "updated_handlers=$UPDATED_HANDLERS" >> $GITHUB_ENV
          fi

      - name: Zip updated Lambda handlers
        if: env.skip_zip == 'false'
        run: |
          for handler in ${{ env.updated_handlers }}; do
              HANDLER_DIR=$(dirname "$handler")
              echo "Zipping $HANDLER_DIR/handler.py into $HANDLER_DIR/handler.py.zip"
              cd "$HANDLER_DIR" # Navigate to the directory containing the handler
              rm -f handler.py.zip # Remove old zip file if it exists
              zip -j handler.py.zip handler.py # Create the zip file
              cd - # Return to the original directory
          done

  terraform:
    needs: zip
    uses: ./.github/workflows/infra-deploy.yml
