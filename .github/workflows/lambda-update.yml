name: Lambda Update Pipeline

on:
  push:
    branches:
      - main
    paths:
      - "lambda/**/handler.py" # Trigger only if Lambda function code changes
  pull_request:
    branches:
      - main
    paths:
      - "lambda/**/handler.py" # Trigger for PRs that change Lambda code

env:
  AWS_REGION: eu-west-3

permissions:
  id-token: write
  contents: read

jobs:
  zip:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.6

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Debug GitHub Event Payload
        run: cat $GITHUB_EVENT_PATH

#       - name: Detect updated Lambda handler files
#         id: detect-changes
#         run: |
#             # Extract changed files from the GitHub event payload
#             CHANGED_FILES=$(jq -r '.commits[].modified[]' < $GITHUB_EVENT_PATH)

#             echo "Changed files: $CHANGED_FILES"

#             # Find updated handler.py files under lambda/
#             UPDATED_HANDLERS=$(echo "$CHANGED_FILES" | grep -E '^lambda/.+/handler\.py$' || true)

#             if [[ -z "$UPDATED_HANDLERS" ]]; then
#                 echo "No updated handlers detected."
#                 echo "skip_zip=true" >> $GITHUB_ENV
#             else
#                 echo "Updated handlers: $UPDATED_HANDLERS"
#                 echo "skip_zip=false" >> $GITHUB_ENV
#                 echo "updated_handlers=$UPDATED_HANDLERS" >> $GITHUB_ENV
#             fi

#       - name: Zip updated Lambda handler files
#         if: env.skip_zip == 'false'
#         run: |
#           |
#           for HANDLER_PATH in ${{ env.updated_handlers }}; do
#             HANDLER_DIR=$(dirname "$HANDLER_PATH")
#             ZIP_FILE="$HANDLER_DIR/handler.py.zip"

#             # Remove the old ZIP file
#             echo "Removing old zip file: $ZIP_FILE"
#             rm -f "$ZIP_FILE"

#             # Create the new ZIP file
#             echo "Creating zip file for: $HANDLER_PATH"
#             cd "$HANDLER_DIR"
#             zip -r handler.py.zip handler.py
#             cd -
#           done

#   terraform:
#     needs: zip
#     uses: ./.github/workflows/infra-deploy.yml
